AWSTemplateFormatVersion: '2010-09-09'
Description: 'Leads Manager App - High Availability Web Application Deployment'

Parameters:
  ImageURI:
    Type: String
    Description: ECR image path - not used in this version
    Default: "192060932952.dkr.ecr.us-east-1.amazonaws.com/leads-manager-app:latest"

Resources:
  # Private network setup
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Leads-Manager-VPC

  # Internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Leads-Manager-VPC-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # First data center subnet
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet AZ1

  # Second data center subnet
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet AZ2

  # Security group for instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: leads-manager-alb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      Scheme: internet-facing
      Type: application

  # Target group for the app
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: leads-manager-tg
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  # Listener for ALB
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      ImageId: ami-0c02fb55956c7d316 # Amazon Linux 2 AMI in us-east-1
      KeyName: my-keypair # Replace with your actual key pair name
      UserData:
        Fn::Base64: |
          #!/bin/bash
          apt-get update -y
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 192060932952.dkr.ecr.us-east-1.amazonaws.com
          docker pull 192060932952.dkr.ecr.us-east-1.amazonaws.com/leads-manager-app:latest
          docker run -d -p 5000:5000 192060932952.dkr.ecr.us-east-1.amazonaws.com/leads-manager-app:latest

Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
